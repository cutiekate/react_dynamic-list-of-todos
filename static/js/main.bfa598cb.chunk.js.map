{"version":3,"sources":["helpers/api.ts","components/TodoList.tsx","components/SortButtons.tsx","App.tsx","index.tsx"],"names":["getInfo","url","fetch","then","response","json","TodoList","todos","className","map","todo","key","title","type","checked","completed","disabled","user","name","SortButtons","reset","sortByTitle","sortByCompleted","sortByUserName","onClick","App","useState","initialTodos","setInitialTodos","isLoading","setIsLoading","sortBy","setSortBy","handleLoadClick","a","todosFromServer","usersFromServer","todosWithUsers","find","id","userId","sort","b","undefined","localeCompare","Number","length","ReactDOM","render","document","getElementById"],"mappings":"iSAeMA,G,MAAU,SAAIC,GAClB,OAAOC,MAhBO,uCAgBSD,GACpBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCXlBC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAEvC,wBAAIC,UAAU,SACXD,EAAME,KAAI,SAAAC,GAAI,OACb,wBACEF,UAAU,OACVG,IAAKD,EAAKE,OAEV,2BAAOC,KAAK,WAAWC,QAASJ,EAAKK,UAAWC,UAAQ,IAJ1D,UAKMN,EAAKE,MALX,KAME,0BAAMJ,UAAU,QACbE,EAAKO,KAAOP,EAAKO,KAAKC,KAAO,iBCJ3BC,EAA+B,SAAC,GAAD,IAC1CC,EAD0C,EAC1CA,MACAC,EAF0C,EAE1CA,YACAC,EAH0C,EAG1CA,gBACAC,EAJ0C,EAI1CA,eAJ0C,OAM1C,2BACE,4BACEf,UAAU,qBACVgB,QAASJ,EACTP,KAAK,UAHP,SAOA,4BACEL,UAAU,qBACVgB,QAASH,EACTR,KAAK,UAHP,iBAOA,4BACEL,UAAU,qBACVgB,QAASF,EACTT,KAAK,UAHP,qBAOA,4BACEL,UAAU,qBACVgB,QAASD,EACTV,KAAK,UAHP,uBC2CWY,EA7EH,WAAO,IAAD,EACwBC,mBAAiB,IADzC,mBACTC,EADS,KACKC,EADL,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGYJ,mBAAS,GAHrB,mBAGTK,EAHS,KAGDC,EAHC,KAKVC,EAAe,uCAAG,gCAAAC,EAAA,6DACtBJ,GAAa,GADS,SHSI9B,EAAc,UGTlB,cAGhBmC,EAHgB,gBHQInC,EAAc,UGRlB,OAIhBoC,EAJgB,OAMhBC,EAAiBF,EAAgB1B,KAAI,SAAAC,GAAI,kCAC1CA,GAD0C,IAE7CO,KAAMmB,EAAgBE,MAAK,SAAArB,GAAI,OAAIA,EAAKsB,KAAO7B,EAAK8B,eAGtDZ,EAAgBS,GAXM,2CAAH,qDA8Bf9B,EAAQ,YAAIoB,GAAcc,MAAK,SAACP,EAAGQ,GACvC,QAAeC,IAAXT,EAAEjB,WAAiC0B,IAAXD,EAAEzB,KAC5B,OAAO,EAGT,OAAQc,GACN,KAAK,EACH,OAAOG,EAAEjB,KAAKC,KAAK0B,cAAcF,EAAEzB,KAAKC,MAE1C,KAAK,EACH,OAAOgB,EAAEtB,MAAMgC,cAAcF,EAAE9B,OAEjC,KAAK,EACH,OAAOiC,OAAOH,EAAE3B,WAAa8B,OAAOX,EAAEnB,WAExC,QACE,OAAO,MAIb,OACE,yBAAKP,UAAU,aACb,wBAAIA,UAAU,UAAd,yBACkB,IAAjBD,EAAMuC,OACL,4BAAQtC,UAAU,SAASK,KAAK,SAASW,QAASS,GAC/CJ,EAAY,aAAe,QAG9B,oCACE,kBAAC,EAAD,CACET,MA9CI,WACZY,EAAU,IA8CFX,YAvCU,WAClBW,EAAU,IAuCFV,gBApCc,WACtBU,EAAU,IAoCFT,eA7Ca,WACrBS,EAAU,MA8CJ,kBAAC,EAAD,CAAUzB,MAAOA,OCzE3BwC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.bfa598cb.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user?: User;\n}\n\nconst getInfo = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => getInfo<User>('/users');\nexport const getTodos = () => getInfo<Todo>('/todos');\n","import React from 'react';\nimport { Todo } from '../helpers/api';\n\ntype Props = {\n  todos: Todo[];\n};\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n\n  <ul className=\"todos\">\n    {todos.map(todo => (\n      <li\n        className=\"todo\"\n        key={todo.title}\n      >\n        <input type=\"checkbox\" checked={todo.completed} disabled />\n        {`${todo.title} `}\n        <span className=\"user\">\n          {todo.user ? todo.user.name : 'Unknown'}\n        </span>\n      </li>\n    ))}\n  </ul>\n);\n","import React from 'react';\n\ninterface ClickHandler {\n  (): void;\n}\n\ntype Props = {\n  reset: ClickHandler;\n  sortByTitle: ClickHandler;\n  sortByCompleted: ClickHandler;\n  sortByUserName: ClickHandler;\n};\n\nexport const SortButtons: React.FC<Props> = ({\n  reset,\n  sortByTitle,\n  sortByCompleted,\n  sortByUserName,\n}) => (\n  <p>\n    <button\n      className=\"button button-sort\"\n      onClick={reset}\n      type=\"button\"\n    >\n      Reset\n    </button>\n    <button\n      className=\"button button-sort\"\n      onClick={sortByTitle}\n      type=\"button\"\n    >\n      Sort by title\n    </button>\n    <button\n      className=\"button button-sort\"\n      onClick={sortByCompleted}\n      type=\"button\"\n    >\n      Sort by completed\n    </button>\n    <button\n      className=\"button button-sort\"\n      onClick={sortByUserName}\n      type=\"button\"\n    >\n      Sort by user name\n    </button>\n\n  </p>\n);\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getUsers, getTodos, Todo } from './helpers/api';\nimport { TodoList } from './components/TodoList';\nimport { SortButtons } from './components/SortButtons';\n\nconst App = () => {\n  const [initialTodos, setInitialTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortBy, setSortBy] = useState(0);\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    const todosFromServer = await getTodos();\n    const usersFromServer = await getUsers();\n\n    const todosWithUsers = todosFromServer.map(todo => ({\n      ...todo,\n      user: usersFromServer.find(user => user.id === todo.userId),\n    }));\n\n    setInitialTodos(todosWithUsers);\n  };\n\n  const reset = () => {\n    setSortBy(0);\n  };\n\n  const sortByUserName = () => {\n    setSortBy(1);\n  };\n\n  const sortByTitle = () => {\n    setSortBy(2);\n  };\n\n  const sortByCompleted = () => {\n    setSortBy(3);\n  };\n\n  const todos = [...initialTodos].sort((a, b) => {\n    if (a.user === undefined || b.user === undefined) {\n      return 0;\n    }\n\n    switch (sortBy) {\n      case 1:\n        return a.user.name.localeCompare(b.user.name);\n\n      case 2:\n        return a.title.localeCompare(b.title);\n\n      case 3:\n        return Number(b.completed) - Number(a.completed);\n\n      default:\n        return 0;\n    }\n  });\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"header\">Dynamic list of TODOs</h1>\n      {todos.length === 0 ? (\n        <button className=\"button\" type=\"button\" onClick={handleLoadClick}>\n          {isLoading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n          <SortButtons\n            reset={reset}\n            sortByTitle={sortByTitle}\n            sortByCompleted={sortByCompleted}\n            sortByUserName={sortByUserName}\n          />\n          <TodoList todos={todos} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}